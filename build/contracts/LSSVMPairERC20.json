{
  "contractName": "LSSVMPairERC20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum CurveErrorCodes.Error",
          "name": "error",
          "type": "uint8"
        }
      ],
      "name": "BondingCurveError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable_NewOwnerZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable_NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "AssetRecipientChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newDelta",
          "type": "uint128"
        }
      ],
      "name": "DeltaUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "newFee",
          "type": "uint96"
        }
      ],
      "name": "FeeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "NFTWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newSpotPrice",
          "type": "uint128"
        }
      ],
      "name": "SpotPriceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SwapNFTInPair",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SwapNFTOutPair",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenWithdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "assetRecipient",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondingCurve",
      "outputs": [
        {
          "internalType": "contract ICurve",
          "name": "_bondingCurve",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "call",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newRecipient",
          "type": "address"
        }
      ],
      "name": "changeAssetRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newDelta",
          "type": "uint128"
        }
      ],
      "name": "changeDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "newFee",
          "type": "uint96"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newSpotPrice",
          "type": "uint128"
        }
      ],
      "name": "changeSpotPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delta",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract ILSSVMPairFactoryLike",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllHeldIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetRecipient",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "_assetRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numNFTs",
          "type": "uint256"
        }
      ],
      "name": "getBuyNFTQuote",
      "outputs": [
        {
          "internalType": "enum CurveErrorCodes.Error",
          "name": "error",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newSpotPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numNFTs",
          "type": "uint256"
        }
      ],
      "name": "getSellNFTQuote",
      "outputs": [
        {
          "internalType": "enum CurveErrorCodes.Error",
          "name": "error",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newSpotPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_assetRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_delta",
          "type": "uint128"
        },
        {
          "internalType": "uint96",
          "name": "_fee",
          "type": "uint96"
        },
        {
          "internalType": "uint128",
          "name": "_spotPrice",
          "type": "uint128"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "calls",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnFail",
          "type": "bool"
        }
      ],
      "name": "multicall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "_nft",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairVariant",
      "outputs": [
        {
          "internalType": "enum ILSSVMPairFactoryLike.PairVariant",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolType",
      "outputs": [
        {
          "internalType": "enum LSSVMPair.PoolType",
          "name": "_poolType",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spotPrice",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minExpectedTokenOutput",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "tokenRecipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isRouter",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "routerCaller",
          "type": "address"
        }
      ],
      "name": "swapNFTsForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numNFTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxExpectedTokenInput",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftRecipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isRouter",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "routerCaller",
          "type": "address"
        }
      ],
      "name": "swapTokenForAnyNFTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "maxExpectedTokenInput",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftRecipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isRouter",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "routerCaller",
          "type": "address"
        }
      ],
      "name": "swapTokenForSpecificNFTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "a",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "a",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "a",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum CurveErrorCodes.Error\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"BondingCurveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable_NewOwnerZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable_NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AssetRecipientChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newDelta\",\"type\":\"uint128\"}],\"name\":\"DeltaUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newFee\",\"type\":\"uint96\"}],\"name\":\"FeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NFTWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newSpotPrice\",\"type\":\"uint128\"}],\"name\":\"SpotPriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SwapNFTInPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SwapNFTOutPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assetRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondingCurve\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"_bondingCurve\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"changeAssetRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newDelta\",\"type\":\"uint128\"}],\"name\":\"changeDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"newFee\",\"type\":\"uint96\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newSpotPrice\",\"type\":\"uint128\"}],\"name\":\"changeSpotPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract ILSSVMPairFactoryLike\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllHeldIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"_assetRecipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numNFTs\",\"type\":\"uint256\"}],\"name\":\"getBuyNFTQuote\",\"outputs\":[{\"internalType\":\"enum CurveErrorCodes.Error\",\"name\":\"error\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newSpotPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numNFTs\",\"type\":\"uint256\"}],\"name\":\"getSellNFTQuote\",\"outputs\":[{\"internalType\":\"enum CurveErrorCodes.Error\",\"name\":\"error\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newSpotPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_assetRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_delta\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"_fee\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"_spotPrice\",\"type\":\"uint128\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairVariant\",\"outputs\":[{\"internalType\":\"enum ILSSVMPairFactoryLike.PairVariant\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolType\",\"outputs\":[{\"internalType\":\"enum LSSVMPair.PoolType\",\"name\":\"_poolType\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotPrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minExpectedTokenOutput\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"tokenRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRouter\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"routerCaller\",\"type\":\"address\"}],\"name\":\"swapNFTsForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numNFTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxExpectedTokenInput\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRouter\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"routerCaller\",\"type\":\"address\"}],\"name\":\"swapTokenForAnyNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxExpectedTokenInput\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRouter\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"routerCaller\",\"type\":\"address\"}],\"name\":\"swapTokenForSpecificNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"boredGenius and 0xmons\",\"kind\":\"dev\",\"methods\":{\"call(address,bytes)\":{\"params\":{\"data\":\"The calldata to pass to the contract\",\"target\":\"The contract to call\"}},\"changeAssetRecipient(address)\":{\"params\":{\"newRecipient\":\"The new asset recipient\"}},\"changeDelta(uint128)\":{\"params\":{\"newDelta\":\"The new delta parameter\"}},\"changeFee(uint96)\":{\"params\":{\"newFee\":\"The new LP fee percentage, 18 decimals\"}},\"changeSpotPrice(uint128)\":{\"params\":{\"newSpotPrice\":\"The new selling spot price value, in Token\"}},\"getBuyNFTQuote(uint256)\":{\"details\":\"Used as read function to query the bonding curve for buy pricing info\",\"params\":{\"numNFTs\":\"The number of NFTs to buy from the pair\"}},\"getSellNFTQuote(uint256)\":{\"details\":\"Used as read function to query the bonding curve for sell pricing info\",\"params\":{\"numNFTs\":\"The number of NFTs to sell to the pair\"}},\"initialize(address,address,uint128,uint96,uint128)\":{\"details\":\"Only called once by factory to initialize. We verify this by making sure that the current owner is address(0). The Ownable library we use disallows setting the owner to be address(0), so this condition should only be valid before the first initialize call.\",\"params\":{\"_assetRecipient\":\"The address that will receive the TOKEN or NFT sent to this pair during swaps. NOTE: If set to address(0), they will go to the pair itself.\",\"_delta\":\"The initial delta of the bonding curve\",\"_fee\":\"The initial % fee taken, if this is a trade pair\",\"_owner\":\"The owner of the pair\",\"_spotPrice\":\"The initial price to sell an asset into the pair\"}},\"multicall(bytes[],bool)\":{\"details\":\"Intended for withdrawing/altering pool pricing in one tx, only callable by owner, cannot change owner\",\"params\":{\"calls\":\"The calldata for each call to make\",\"revertOnFail\":\"Whether or not to revert the entire tx if any of the calls fail\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"swapNFTsForToken(uint256[],uint256,address,bool,address)\":{\"details\":\"To compute the amount of token to that will be received, call bondingCurve.getSellInfo.\",\"params\":{\"isRouter\":\"True if calling from LSSVMRouter, false otherwise. Not used for ETH pairs.\",\"minExpectedTokenOutput\":\"The minimum acceptable token received by the sender. If the actual amount is less than this value, the transaction will be reverted.\",\"nftIds\":\"The list of IDs of the NFTs to sell to the pair\",\"routerCaller\":\"If isRouter is true, ERC20 tokens will be transferred from this address. Not used for ETH pairs.\",\"tokenRecipient\":\"The recipient of the token output\"},\"returns\":{\"outputAmount\":\"The amount of token received\"}},\"swapTokenForAnyNFTs(uint256,uint256,address,bool,address)\":{\"details\":\"To compute the amount of token to send, call bondingCurve.getBuyInfo. This swap function is meant for users who are ID agnostic\",\"params\":{\"isRouter\":\"True if calling from LSSVMRouter, false otherwise. Not used for ETH pairs.\",\"maxExpectedTokenInput\":\"The maximum acceptable cost from the sender. If the actual amount is greater than this value, the transaction will be reverted.\",\"nftRecipient\":\"The recipient of the NFTs\",\"numNFTs\":\"The number of NFTs to purchase\",\"routerCaller\":\"If isRouter is true, ERC20 tokens will be transferred from this address. Not used for ETH pairs.\"},\"returns\":{\"inputAmount\":\"The amount of token used for purchase\"}},\"swapTokenForSpecificNFTs(uint256[],uint256,address,bool,address)\":{\"details\":\"To compute the amount of token to send, call bondingCurve.getBuyInfo This swap is meant for users who want specific IDs. Also higher chance of reverting if some of the specified IDs leave the pool before the swap goes through.\",\"params\":{\"isRouter\":\"True if calling from LSSVMRouter, false otherwise. Not used for ETH pairs.\",\"maxExpectedTokenInput\":\"The maximum acceptable cost from the sender. If the actual amount is greater than this value, the transaction will be reverted.\",\"nftIds\":\"The list of IDs of the NFTs to purchase\",\"nftRecipient\":\"The recipient of the NFTs\",\"routerCaller\":\"If isRouter is true, ERC20 tokens will be transferred from this address. Not used for ETH pairs.\"},\"returns\":{\"inputAmount\":\"The amount of token used for purchase\"}},\"token()\":{\"details\":\"See LSSVMPairCloner for an explanation on how this works\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Disallows setting to the zero address as a way to more gas-efficiently avoid reinitialization When ownership is transferred, if the new owner implements IOwnershipTransferCallback, we make a callback Can only be called by the current owner.\"},\"withdrawERC1155(address,uint256[],uint256[])\":{\"params\":{\"a\":\"The NFT to transfer\",\"amounts\":\"The amounts of each id to transfer\",\"ids\":\"The NFT ids to transfer\"}},\"withdrawERC20(address,uint256)\":{\"params\":{\"a\":\"The token to transfer\",\"amount\":\"The amount of tokens to send to the owner\"}},\"withdrawERC721(address,uint256[])\":{\"details\":\"If the NFT is the pair's collection, we also remove it from the id tracking (if the NFT is missing enumerable).\",\"params\":{\"a\":\"The NFT to transfer\",\"nftIds\":\"The list of IDs of the NFTs to send to the owner\"}}},\"title\":\"An NFT/Token pair where the token is an ERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bondingCurve()\":{\"notice\":\"Returns the type of bonding curve that parameterizes the pair\"},\"call(address,bytes)\":{\"notice\":\"Allows the pair to make arbitrary external calls to contracts whitelisted by the protocol. Only callable by the owner.\"},\"changeAssetRecipient(address)\":{\"notice\":\"Changes the address that will receive assets received from trades. Only callable by the owner.\"},\"changeDelta(uint128)\":{\"notice\":\"Updates the delta parameter. Only callable by the owner.\"},\"changeFee(uint96)\":{\"notice\":\"Updates the fee taken by the LP. Only callable by the owner. Only callable if the pool is a Trade pool. Reverts if the fee is >= MAX_FEE.\"},\"changeSpotPrice(uint128)\":{\"notice\":\"Updates the selling spot price. Only callable by the owner.\"},\"getAllHeldIds()\":{\"notice\":\"Returns all NFT IDs held by the pool\"},\"getAssetRecipient()\":{\"notice\":\"Returns the address that assets that receives assets when a swap is done with this pair Can be set to another address by the owner, if set to address(0), defaults to the pair's own address\"},\"initialize(address,address,uint128,uint96,uint128)\":{\"notice\":\"Called during pair creation to set initial parameters\"},\"multicall(bytes[],bool)\":{\"notice\":\"Allows owner to batch multiple calls, forked from: https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringBatchable.sol\"},\"nft()\":{\"notice\":\"Returns the NFT collection that parameterizes the pair\"},\"pairVariant()\":{\"notice\":\"Returns the pair's variant (NFT is enumerable or not, pair uses ETH or ERC20)\"},\"poolType()\":{\"notice\":\"Returns the pair's type (TOKEN/NFT/TRADE)\"},\"swapNFTsForToken(uint256[],uint256,address,bool,address)\":{\"notice\":\"Sends a set of NFTs to the pair in exchange for token\"},\"swapTokenForAnyNFTs(uint256,uint256,address,bool,address)\":{\"notice\":\"Sends token to the pair in exchange for any `numNFTs` NFTs\"},\"swapTokenForSpecificNFTs(uint256[],uint256,address,bool,address)\":{\"notice\":\"Sends token to the pair in exchange for a specific set of NFTs\"},\"token()\":{\"notice\":\"Returns the ERC20 token associated with the pair\"},\"withdrawERC1155(address,uint256[],uint256[])\":{\"notice\":\"Rescues ERC1155 tokens from the pair to the owner. Only callable by the owner.\"},\"withdrawERC20(address,uint256)\":{\"notice\":\"Rescues ERC20 tokens from the pair to the owner. Only callable by the owner (onlyOwnable modifier is in the implemented function).\"},\"withdrawERC721(address,uint256[])\":{\"notice\":\"Rescues a specified set of NFTs owned by the pair to the owner address. (onlyOwnable modifier is in the implemented function)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/LSSVMPairERC20.sol\":\"LSSVMPairERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd9c47a375639888e726a99da718890ba16d17d7ad9eacb0ccc892d46d1b3ee0\",\"dweb:/ipfs/Qmb41W5RUjy2sWg49A2rMnxekSeEk6SvGyJL5tyCCSr7un\"]},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e28648f994abf1d6bc345644a361cc0b7efa544f8bc0c8ec26011fed85a91ec\",\"dweb:/ipfs/QmVVE7AiRjKaQYYji7TkjmTeVzGpNmms5eoxqTCfvvpj6D\"]},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a74009db3c6fc8db851ba69ddb6795b5c1ef1120c5a00fd1a8dc3a717dd9d519\",\"dweb:/ipfs/QmZMk8Yh2X3gPS51ckUVLEXjZUhMSEeGApnA53WtjvLb9h\"]},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0808de0ae4918c664643c885ca7fa6503e8ef2bd75609dfc85152c0128a3422d\",\"dweb:/ipfs/QmNrhFC1XgBKuuxfahFeiwi1MCdu3FLNpHj2uStgmf4iJj\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f\",\"dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"keccak256\":\"0xc65c83c1039508fa7a42a09a3c6a32babd1c438ba4dbb23581255e784b5d5eed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a1b3b38db0f76429db899909025e534c366415e9ea8b5ddc4c8901e6a7fc1461\",\"dweb:/ipfs/QmYv1KxyHjLEky9JWNSsSfpGJbiCxFyzVFgTwQKpiqYGUg\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"project:/contracts/ILSSVMPairFactoryLike.sol\":{\"keccak256\":\"0x1cbba0c87aefdb0d4d4cc6b603baed5cbb500001a7841a58af5726428830b767\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://f47ee4c89604392e74d3737dc92b6a79bf437bf748fcabf841a14ecf98ce945c\",\"dweb:/ipfs/QmT9YKwhNzLkRSWFovyuCpYjYa7Z7y78iZrVXLU6GtvWQS\"]},\"project:/contracts/LSSVMPair.sol\":{\"keccak256\":\"0x66765f0cd328be99ec642ecfb474fe9bb3bd140a528d82b0544d4d900cc7470a\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://9bb9ed470cbf78774868f6513d4fe3da8c34ea8110288e8a24e101255330d112\",\"dweb:/ipfs/Qmer9m8WomAcTBPd85h8GWcFmh7desiK7A1QhLZhsb88Wz\"]},\"project:/contracts/LSSVMPairERC20.sol\":{\"keccak256\":\"0x7d463452b81d521534efbf341ff53b2688b44e1cf689446ba6f82be4a83acd90\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://5148b92c349f10ae95771235e75e13678a02111be14f2e8dfe4720ade24362de\",\"dweb:/ipfs/QmeWMnuN2hwADmGSJ34ap58Z8MVnJSU2yqziG3PzqWxzDq\"]},\"project:/contracts/LSSVMRouter.sol\":{\"keccak256\":\"0x3b5fecaba8258b9c1eec98d2e014e57898576677f8d4c773ef1c4eca28ae428c\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://9ca30643b84b91af3505bf36744e801667fdb26c27a8cdad6e0468425d7d1150\",\"dweb:/ipfs/QmNUUDnzfaJCHzcW6R4Jn5bUj2gSJAP41CUpTw52h6ZxAa\"]},\"project:/contracts/bonding-curves/CurveErrorCodes.sol\":{\"keccak256\":\"0x921fa756278ee39ea5e10c85933f1775ff4a412b700961837097b5da72e2c2ca\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://8bc64cbcac649bcc4ea42df0c913dde0c7cb90cb2e724b8ed12e4d3f37e5436c\",\"dweb:/ipfs/Qmcyh8k4pbcDB9qSPMppbAYDYgbweH4sy4AaAEjFHYHBcZ\"]},\"project:/contracts/bonding-curves/ICurve.sol\":{\"keccak256\":\"0xc845d2cb70966da8b2bd6f5d51abbfd459ae9c3f27449b8243aa5182bc174d24\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://3338d5eea46a635ead3c390632dc4eaa0de0a870c784902c27c3c88359fce0d2\",\"dweb:/ipfs/QmWmELkig6wiKxEzuNRmf2PFjJbBJFnePSASh2DKBnCWfX\"]},\"project:/contracts/lib/IOwnershipTransferCallback.sol\":{\"keccak256\":\"0xde525ebc5c03d56e223c7ec16436763e8432b0f90e040eac58eb0123c172c0f7\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://575c817eb62547db9d69cfca2978127bb458752d551f884039a81e67fc11c191\",\"dweb:/ipfs/QmX2Fco7R9DZq7swEdD7zDi2CxdDrFgDPPi2JrnNSuMN2U\"]},\"project:/contracts/lib/OwnableWithTransferCallback.sol\":{\"keccak256\":\"0x911a1d3248ba5771c4fec49a28a90bc77855eed016464b68de79ea4d79a76e66\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://4062e6c217c523417acf136b4c9cbabcdb4ed1bd3fc57363434242effb8793b6\",\"dweb:/ipfs/QmQbHmySvEf9PGMTCfFh7yChxHu3TjD2woUC9QQfPrK2HT\"]},\"project:/contracts/lib/ReentrancyGuard.sol\":{\"keccak256\":\"0x879a738e470b63aac602ec990d8fd3384d8ad7fafb0be3ef4c4230ed01681374\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cfbe7f77e24de9701c62fdd1a56a53de050a1bdb063833e1e413a16bc0885655\",\"dweb:/ipfs/QmTEnFQbNU2ziqtVKWNBiPZEfeEroowNj1pFAmuGYW7oHn\"]},\"project:/contracts/tokens/ERC20.sol\":{\"keccak256\":\"0x058e0708ffdd2b04a17b96b5775d9fab8daa19d3cd37d26ce6c923679bf9cc9a\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://dc16a35908a2205e07aa95d572e1a7eb79e0694a21e835099ffa3b8dd12c72bb\",\"dweb:/ipfs/QmXVcoSJP7XxAMBAfZKinVxSEN76qP9Z1r4Ug27qLfYTvf\"]},\"project:/contracts/utils/SafeTransferLib.sol\":{\"keccak256\":\"0x50f187c86835070ec519acffcc259cd7900fdb85cb53333210fba9491eb65eca\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://8ec4b716247a140c1ec447717127a7a780a5545eedcca24676415efaefe0e340\",\"dweb:/ipfs/Qmb1YXkn4oac5Wt7rjM98iih7rjys4YcVDJcqcbapYudnF\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {SafeTransferLib} from \"./utils/SafeTransferLib.sol\";\nimport {ERC20} from \"./tokens/ERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {LSSVMPair} from \"./LSSVMPair.sol\";\nimport {ILSSVMPairFactoryLike} from \"./ILSSVMPairFactoryLike.sol\";\nimport {LSSVMRouter} from \"./LSSVMRouter.sol\";\nimport {ICurve} from \"./bonding-curves/ICurve.sol\";\nimport {CurveErrorCodes} from \"./bonding-curves/CurveErrorCodes.sol\";\n\n/**\n    @title An NFT/Token pair where the token is an ERC20\n    @author boredGenius and 0xmons\n */\nabstract contract LSSVMPairERC20 is LSSVMPair {\n    using SafeTransferLib for ERC20;\n\n    uint256 internal constant IMMUTABLE_PARAMS_LENGTH = 81;\n\n    /**\n        @notice Returns the ERC20 token associated with the pair\n        @dev See LSSVMPairCloner for an explanation on how this works\n     */\n    function token() public pure returns (ERC20 _token) {\n        uint256 paramsLength = _immutableParamsLength();\n        assembly {\n            _token := shr(\n                0x60,\n                calldataload(add(sub(calldatasize(), paramsLength), 61))\n            )\n        }\n    }\n\n    /// @inheritdoc LSSVMPair\n    function _pullTokenInputAndPayProtocolFee(\n        uint256 inputAmount,\n        bool isRouter,\n        address routerCaller,\n        ILSSVMPairFactoryLike _factory,\n        uint256 protocolFee\n    ) internal override {\n        require(msg.value == 0, \"ERC20 pair\");\n\n        ERC20 _token = token();\n        address _assetRecipient = getAssetRecipient();\n\n        if (isRouter) {\n            // Verify if router is allowed\n            LSSVMRouter router = LSSVMRouter(payable(msg.sender));\n\n            // Locally scoped to avoid stack too deep\n            {\n                (bool routerAllowed, ) = _factory.routerStatus(router);\n                require(routerAllowed, \"Not router\");\n            }\n\n            // Cache state and then call router to transfer tokens from user\n            uint256 beforeBalance = _token.balanceOf(_assetRecipient);\n            router.pairTransferERC20From(\n                _token,\n                routerCaller,\n                _assetRecipient,\n                inputAmount - protocolFee,\n                pairVariant()\n            );\n\n            // Verify token transfer (protect pair against malicious router)\n            require(\n                _token.balanceOf(_assetRecipient) - beforeBalance ==\n                    inputAmount - protocolFee,\n                \"ERC20 not transferred in\"\n            );\n\n            router.pairTransferERC20From(\n                _token,\n                routerCaller,\n                address(_factory),\n                protocolFee,\n                pairVariant()\n            );\n\n            // Note: no check for factory balance's because router is assumed to be set by factory owner\n            // so there is no incentive to *not* pay protocol fee\n        } else {\n            // Transfer tokens directly\n            _token.safeTransferFrom(\n                msg.sender,\n                _assetRecipient,\n                inputAmount - protocolFee\n            );\n\n            // Take protocol fee (if it exists)\n            if (protocolFee > 0) {\n                _token.safeTransferFrom(\n                    msg.sender,\n                    address(_factory),\n                    protocolFee\n                );\n            }\n        }\n    }\n\n    /// @inheritdoc LSSVMPair\n    function _refundTokenToSender(uint256 inputAmount) internal override {\n        // Do nothing since we transferred the exact input amount\n    }\n\n    /// @inheritdoc LSSVMPair\n    function _payProtocolFeeFromPair(\n        ILSSVMPairFactoryLike _factory,\n        uint256 protocolFee\n    ) internal override {\n        // Take protocol fee (if it exists)\n        if (protocolFee > 0) {\n            ERC20 _token = token();\n\n            // Round down to the actual token balance if there are numerical stability issues with the bonding curve calculations\n            uint256 pairTokenBalance = _token.balanceOf(address(this));\n            if (protocolFee > pairTokenBalance) {\n                protocolFee = pairTokenBalance;\n            }\n            if (protocolFee > 0) {\n                _token.safeTransfer(address(_factory), protocolFee);\n            }\n        }\n    }\n\n    /// @inheritdoc LSSVMPair\n    function _sendTokenOutput(\n        address payable tokenRecipient,\n        uint256 outputAmount\n    ) internal override {\n        // Send tokens to caller\n        if (outputAmount > 0) {\n            token().safeTransfer(tokenRecipient, outputAmount);\n        }\n    }\n\n    /// @inheritdoc LSSVMPair\n    // @dev see LSSVMPairCloner for params length calculation\n    function _immutableParamsLength() internal pure override returns (uint256) {\n        return IMMUTABLE_PARAMS_LENGTH;\n    }\n\n    /// @inheritdoc LSSVMPair\n    function withdrawERC20(ERC20 a, uint256 amount)\n        external\n        override\n        onlyOwner\n    {\n        a.safeTransfer(msg.sender, amount);\n\n        if (a == token()) {\n            // emit event since it is the pair token\n            emit TokenWithdrawal(amount);\n        }\n    }\n}\n",
  "sourcePath": "/Users/brett/workSpace/NFTSea/nftsea-contract/contracts/LSSVMPairERC20.sol",
  "ast": {
    "absolutePath": "project:/contracts/LSSVMPairERC20.sol",
    "exportedSymbols": {
      "CurveErrorCodes": [
        7963
      ],
      "ERC20": [
        9316
      ],
      "ICurve": [
        8375
      ],
      "IERC721": [
        476
      ],
      "ILSSVMPairFactoryLike": [
        1700
      ],
      "LSSVMPair": [
        3162
      ],
      "LSSVMPairERC20": [
        3472
      ],
      "LSSVMRouter": [
        7332
      ],
      "SafeTransferLib": [
        10226
      ]
    },
    "id": 3473,
    "license": "AGPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3164,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "37:23:15"
      },
      {
        "absolutePath": "project:/contracts/utils/SafeTransferLib.sol",
        "file": "./utils/SafeTransferLib.sol",
        "id": 3166,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3473,
        "sourceUnit": 10227,
        "src": "62:60:15",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3165,
              "name": "SafeTransferLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 10226,
              "src": "70:15:15",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/tokens/ERC20.sol",
        "file": "./tokens/ERC20.sol",
        "id": 3168,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3473,
        "sourceUnit": 9317,
        "src": "123:41:15",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3167,
              "name": "ERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 9316,
              "src": "131:5:15",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 3170,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3473,
        "sourceUnit": 477,
        "src": "165:73:15",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3169,
              "name": "IERC721",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 476,
              "src": "173:7:15",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/LSSVMPair.sol",
        "file": "./LSSVMPair.sol",
        "id": 3172,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3473,
        "sourceUnit": 3163,
        "src": "239:42:15",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3171,
              "name": "LSSVMPair",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3162,
              "src": "247:9:15",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/ILSSVMPairFactoryLike.sol",
        "file": "./ILSSVMPairFactoryLike.sol",
        "id": 3174,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3473,
        "sourceUnit": 1701,
        "src": "282:66:15",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3173,
              "name": "ILSSVMPairFactoryLike",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1700,
              "src": "290:21:15",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/LSSVMRouter.sol",
        "file": "./LSSVMRouter.sol",
        "id": 3176,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3473,
        "sourceUnit": 7333,
        "src": "349:46:15",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3175,
              "name": "LSSVMRouter",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 7332,
              "src": "357:11:15",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/bonding-curves/ICurve.sol",
        "file": "./bonding-curves/ICurve.sol",
        "id": 3178,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3473,
        "sourceUnit": 8376,
        "src": "396:51:15",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3177,
              "name": "ICurve",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 8375,
              "src": "404:6:15",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/bonding-curves/CurveErrorCodes.sol",
        "file": "./bonding-curves/CurveErrorCodes.sol",
        "id": 3180,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3473,
        "sourceUnit": 7964,
        "src": "448:69:15",
        "symbolAliases": [
          {
            "foreign": {
              "id": 3179,
              "name": "CurveErrorCodes",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 7963,
              "src": "456:15:15",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 3182,
              "name": "LSSVMPair",
              "nameLocations": [
                "655:9:15"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3162,
              "src": "655:9:15"
            },
            "id": 3183,
            "nodeType": "InheritanceSpecifier",
            "src": "655:9:15"
          }
        ],
        "canonicalName": "LSSVMPairERC20",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 3181,
          "nodeType": "StructuredDocumentation",
          "src": "519:99:15",
          "text": "@title An NFT/Token pair where the token is an ERC20\n@author boredGenius and 0xmons"
        },
        "fullyImplemented": false,
        "id": 3472,
        "linearizedBaseContracts": [
          3472,
          3162,
          326,
          360,
          275,
          848,
          1054,
          8923,
          8883
        ],
        "name": "LSSVMPairERC20",
        "nameLocation": "637:14:15",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 3187,
            "libraryName": {
              "id": 3184,
              "name": "SafeTransferLib",
              "nameLocations": [
                "677:15:15"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 10226,
              "src": "677:15:15"
            },
            "nodeType": "UsingForDirective",
            "src": "671:32:15",
            "typeName": {
              "id": 3186,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 3185,
                "name": "ERC20",
                "nameLocations": [
                  "697:5:15"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 9316,
                "src": "697:5:15"
              },
              "referencedDeclaration": 9316,
              "src": "697:5:15",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$9316",
                "typeString": "contract ERC20"
              }
            }
          },
          {
            "constant": true,
            "id": 3190,
            "mutability": "constant",
            "name": "IMMUTABLE_PARAMS_LENGTH",
            "nameLocation": "735:23:15",
            "nodeType": "VariableDeclaration",
            "scope": 3472,
            "src": "709:54:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 3188,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "709:7:15",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3831",
              "id": 3189,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "761:2:15",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_81_by_1",
                "typeString": "int_const 81"
              },
              "value": "81"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 3203,
              "nodeType": "Block",
              "src": "973:229:15",
              "statements": [
                {
                  "assignments": [
                    3198
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 3198,
                      "mutability": "mutable",
                      "name": "paramsLength",
                      "nameLocation": "991:12:15",
                      "nodeType": "VariableDeclaration",
                      "scope": 3203,
                      "src": "983:20:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 3197,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "983:7:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 3201,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 3199,
                      "name": "_immutableParamsLength",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3440
                      ],
                      "referencedDeclaration": 3440,
                      "src": "1006:22:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$_t_uint256_$",
                        "typeString": "function () pure returns (uint256)"
                      }
                    },
                    "id": 3200,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1006:24:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "983:47:15"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "1049:147:15",
                    "statements": [
                      {
                        "nodeType": "YulAssignment",
                        "src": "1063:123:15",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1094:4:15",
                              "type": "",
                              "value": "0x60"
                            },
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [],
                                          "functionName": {
                                            "name": "calldatasize",
                                            "nodeType": "YulIdentifier",
                                            "src": "1137:12:15"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1137:14:15"
                                        },
                                        {
                                          "name": "paramsLength",
                                          "nodeType": "YulIdentifier",
                                          "src": "1153:12:15"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "1133:3:15"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1133:33:15"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1168:2:15",
                                      "type": "",
                                      "value": "61"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1129:3:15"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1129:42:15"
                                }
                              ],
                              "functionName": {
                                "name": "calldataload",
                                "nodeType": "YulIdentifier",
                                "src": "1116:12:15"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1116:56:15"
                            }
                          ],
                          "functionName": {
                            "name": "shr",
                            "nodeType": "YulIdentifier",
                            "src": "1073:3:15"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1073:113:15"
                        },
                        "variableNames": [
                          {
                            "name": "_token",
                            "nodeType": "YulIdentifier",
                            "src": "1063:6:15"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "london",
                  "externalReferences": [
                    {
                      "declaration": 3195,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1063:6:15",
                      "valueSize": 1
                    },
                    {
                      "declaration": 3198,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "1153:12:15",
                      "valueSize": 1
                    }
                  ],
                  "id": 3202,
                  "nodeType": "InlineAssembly",
                  "src": "1040:156:15"
                }
              ]
            },
            "documentation": {
              "id": 3191,
              "nodeType": "StructuredDocumentation",
              "src": "770:146:15",
              "text": "@notice Returns the ERC20 token associated with the pair\n@dev See LSSVMPairCloner for an explanation on how this works"
            },
            "functionSelector": "fc0c546a",
            "id": 3204,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "token",
            "nameLocation": "930:5:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3192,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "935:2:15"
            },
            "returnParameters": {
              "id": 3196,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3195,
                  "mutability": "mutable",
                  "name": "_token",
                  "nameLocation": "965:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3204,
                  "src": "959:12:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$9316",
                    "typeString": "contract ERC20"
                  },
                  "typeName": {
                    "id": 3194,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3193,
                      "name": "ERC20",
                      "nameLocations": [
                        "959:5:15"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 9316,
                      "src": "959:5:15"
                    },
                    "referencedDeclaration": 9316,
                    "src": "959:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$9316",
                      "typeString": "contract ERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "958:14:15"
            },
            "scope": 3472,
            "src": "921:281:15",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              2629
            ],
            "body": {
              "id": 3343,
              "nodeType": "Block",
              "src": "1455:1986:15",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 3224,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 3221,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "1473:3:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 3222,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1477:5:15",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1473:9:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 3223,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1486:1:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1473:14:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332302070616972",
                        "id": 3225,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1489:12:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_512f87369771fe29bfaaeb0b9b9bfbd046649a3c007b253651e99fe450f82892",
                          "typeString": "literal_string \"ERC20 pair\""
                        },
                        "value": "ERC20 pair"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_512f87369771fe29bfaaeb0b9b9bfbd046649a3c007b253651e99fe450f82892",
                          "typeString": "literal_string \"ERC20 pair\""
                        }
                      ],
                      "id": 3220,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1465:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 3226,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1465:37:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3227,
                  "nodeType": "ExpressionStatement",
                  "src": "1465:37:15"
                },
                {
                  "assignments": [
                    3230
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 3230,
                      "mutability": "mutable",
                      "name": "_token",
                      "nameLocation": "1519:6:15",
                      "nodeType": "VariableDeclaration",
                      "scope": 3343,
                      "src": "1513:12:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$9316",
                        "typeString": "contract ERC20"
                      },
                      "typeName": {
                        "id": 3229,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 3228,
                          "name": "ERC20",
                          "nameLocations": [
                            "1513:5:15"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 9316,
                          "src": "1513:5:15"
                        },
                        "referencedDeclaration": 9316,
                        "src": "1513:5:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$9316",
                          "typeString": "contract ERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 3233,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 3231,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3204,
                      "src": "1528:5:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_ERC20_$9316_$",
                        "typeString": "function () pure returns (contract ERC20)"
                      }
                    },
                    "id": 3232,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1528:7:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$9316",
                      "typeString": "contract ERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1513:22:15"
                },
                {
                  "assignments": [
                    3235
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 3235,
                      "mutability": "mutable",
                      "name": "_assetRecipient",
                      "nameLocation": "1553:15:15",
                      "nodeType": "VariableDeclaration",
                      "scope": 3343,
                      "src": "1545:23:15",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 3234,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1545:7:15",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 3238,
                  "initialValue": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 3236,
                      "name": "getAssetRecipient",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2394,
                      "src": "1571:17:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                        "typeString": "function () view returns (address payable)"
                      }
                    },
                    "id": 3237,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1571:19:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1545:45:15"
                },
                {
                  "condition": {
                    "id": 3239,
                    "name": "isRouter",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3209,
                    "src": "1605:8:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 3341,
                    "nodeType": "Block",
                    "src": "2968:467:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 3316,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3063:3:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3317,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3067:6:15",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3063:10:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3318,
                              "name": "_assetRecipient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3235,
                              "src": "3091:15:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3321,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3319,
                                "name": "inputAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3207,
                                "src": "3124:11:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 3320,
                                "name": "protocolFee",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3216,
                                "src": "3138:11:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3124:25:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 3313,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3230,
                              "src": "3022:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$9316",
                                "typeString": "contract ERC20"
                              }
                            },
                            "id": 3315,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3029:16:15",
                            "memberName": "safeTransferFrom",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 10172,
                            "src": "3022:23:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$9316_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$9316_$",
                              "typeString": "function (contract ERC20,address,address,uint256)"
                            }
                          },
                          "id": 3322,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3022:141:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3323,
                        "nodeType": "ExpressionStatement",
                        "src": "3022:141:15"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3326,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3324,
                            "name": "protocolFee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3216,
                            "src": "3230:11:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 3325,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3244:1:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3230:15:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3340,
                        "nodeType": "IfStatement",
                        "src": "3226:199:15",
                        "trueBody": {
                          "id": 3339,
                          "nodeType": "Block",
                          "src": "3247:178:15",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 3330,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "3310:3:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 3331,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "3314:6:15",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "3310:10:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "id": 3334,
                                        "name": "_factory",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3214,
                                        "src": "3350:8:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_ILSSVMPairFactoryLike_$1700",
                                          "typeString": "contract ILSSVMPairFactoryLike"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_ILSSVMPairFactoryLike_$1700",
                                          "typeString": "contract ILSSVMPairFactoryLike"
                                        }
                                      ],
                                      "id": 3333,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "3342:7:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 3332,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "3342:7:15",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 3335,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3342:17:15",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 3336,
                                    "name": "protocolFee",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3216,
                                    "src": "3381:11:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 3327,
                                    "name": "_token",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3230,
                                    "src": "3265:6:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_ERC20_$9316",
                                      "typeString": "contract ERC20"
                                    }
                                  },
                                  "id": 3329,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "3272:16:15",
                                  "memberName": "safeTransferFrom",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 10172,
                                  "src": "3265:23:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$9316_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$9316_$",
                                    "typeString": "function (contract ERC20,address,address,uint256)"
                                  }
                                },
                                "id": 3337,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3265:145:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 3338,
                              "nodeType": "ExpressionStatement",
                              "src": "3265:145:15"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 3342,
                  "nodeType": "IfStatement",
                  "src": "1601:1834:15",
                  "trueBody": {
                    "id": 3312,
                    "nodeType": "Block",
                    "src": "1615:1347:15",
                    "statements": [
                      {
                        "assignments": [
                          3242
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3242,
                            "mutability": "mutable",
                            "name": "router",
                            "nameLocation": "1684:6:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3312,
                            "src": "1672:18:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_LSSVMRouter_$7332",
                              "typeString": "contract LSSVMRouter"
                            },
                            "typeName": {
                              "id": 3241,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 3240,
                                "name": "LSSVMRouter",
                                "nameLocations": [
                                  "1672:11:15"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 7332,
                                "src": "1672:11:15"
                              },
                              "referencedDeclaration": 7332,
                              "src": "1672:11:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LSSVMRouter_$7332",
                                "typeString": "contract LSSVMRouter"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3250,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 3246,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "1713:3:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 3247,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1717:6:15",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "1713:10:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 3245,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1705:8:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                  "typeString": "type(address payable)"
                                },
                                "typeName": {
                                  "id": 3244,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1705:8:15",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3248,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1705:19:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "id": 3243,
                            "name": "LSSVMRouter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7332,
                            "src": "1693:11:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_LSSVMRouter_$7332_$",
                              "typeString": "type(contract LSSVMRouter)"
                            }
                          },
                          "id": 3249,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1693:32:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_LSSVMRouter_$7332",
                            "typeString": "contract LSSVMRouter"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1672:53:15"
                      },
                      {
                        "id": 3263,
                        "nodeType": "Block",
                        "src": "1794:141:15",
                        "statements": [
                          {
                            "assignments": [
                              3252,
                              null
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 3252,
                                "mutability": "mutable",
                                "name": "routerAllowed",
                                "nameLocation": "1818:13:15",
                                "nodeType": "VariableDeclaration",
                                "scope": 3263,
                                "src": "1813:18:15",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "typeName": {
                                  "id": 3251,
                                  "name": "bool",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1813:4:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "visibility": "internal"
                              },
                              null
                            ],
                            "id": 3257,
                            "initialValue": {
                              "arguments": [
                                {
                                  "id": 3255,
                                  "name": "router",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3242,
                                  "src": "1859:6:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_LSSVMRouter_$7332",
                                    "typeString": "contract LSSVMRouter"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_LSSVMRouter_$7332",
                                    "typeString": "contract LSSVMRouter"
                                  }
                                ],
                                "expression": {
                                  "id": 3253,
                                  "name": "_factory",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3214,
                                  "src": "1837:8:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ILSSVMPairFactoryLike_$1700",
                                    "typeString": "contract ILSSVMPairFactoryLike"
                                  }
                                },
                                "id": 3254,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1846:12:15",
                                "memberName": "routerStatus",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1689,
                                "src": "1837:21:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_contract$_LSSVMRouter_$7332_$returns$_t_bool_$_t_bool_$",
                                  "typeString": "function (contract LSSVMRouter) view external returns (bool,bool)"
                                }
                              },
                              "id": 3256,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1837:29:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$_t_bool_$_t_bool_$",
                                "typeString": "tuple(bool,bool)"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "1812:54:15"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 3259,
                                  "name": "routerAllowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3252,
                                  "src": "1892:13:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                {
                                  "hexValue": "4e6f7420726f75746572",
                                  "id": 3260,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1907:12:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_ce73220daea1d0c4fac1c32a18c58b97308ac9dd44a17004824bb79e7e79ed3c",
                                    "typeString": "literal_string \"Not router\""
                                  },
                                  "value": "Not router"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_ce73220daea1d0c4fac1c32a18c58b97308ac9dd44a17004824bb79e7e79ed3c",
                                    "typeString": "literal_string \"Not router\""
                                  }
                                ],
                                "id": 3258,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  4294967278,
                                  4294967278
                                ],
                                "referencedDeclaration": 4294967278,
                                "src": "1884:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (bool,string memory) pure"
                                }
                              },
                              "id": 3261,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1884:36:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 3262,
                            "nodeType": "ExpressionStatement",
                            "src": "1884:36:15"
                          }
                        ]
                      },
                      {
                        "assignments": [
                          3265
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3265,
                            "mutability": "mutable",
                            "name": "beforeBalance",
                            "nameLocation": "2034:13:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3312,
                            "src": "2026:21:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3264,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2026:7:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3270,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 3268,
                              "name": "_assetRecipient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3235,
                              "src": "2067:15:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 3266,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3230,
                              "src": "2050:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$9316",
                                "typeString": "contract ERC20"
                              }
                            },
                            "id": 3267,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2057:9:15",
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 8954,
                            "src": "2050:16:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 3269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2050:33:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2026:57:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3274,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3230,
                              "src": "2143:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$9316",
                                "typeString": "contract ERC20"
                              }
                            },
                            {
                              "id": 3275,
                              "name": "routerCaller",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3211,
                              "src": "2167:12:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3276,
                              "name": "_assetRecipient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3235,
                              "src": "2197:15:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3279,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 3277,
                                "name": "inputAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3207,
                                "src": "2230:11:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 3278,
                                "name": "protocolFee",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3216,
                                "src": "2244:11:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2230:25:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 3280,
                                "name": "pairVariant",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2295,
                                "src": "2273:11:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_enum$_PairVariant_$1662_$",
                                  "typeString": "function () pure returns (enum ILSSVMPairFactoryLike.PairVariant)"
                                }
                              },
                              "id": 3281,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2273:13:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_PairVariant_$1662",
                                "typeString": "enum ILSSVMPairFactoryLike.PairVariant"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_ERC20_$9316",
                                "typeString": "contract ERC20"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_enum$_PairVariant_$1662",
                                "typeString": "enum ILSSVMPairFactoryLike.PairVariant"
                              }
                            ],
                            "expression": {
                              "id": 3271,
                              "name": "router",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3242,
                              "src": "2097:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LSSVMRouter_$7332",
                                "typeString": "contract LSSVMRouter"
                              }
                            },
                            "id": 3273,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2104:21:15",
                            "memberName": "pairTransferERC20From",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 6911,
                            "src": "2097:28:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_contract$_ERC20_$9316_$_t_address_$_t_address_$_t_uint256_$_t_enum$_PairVariant_$1662_$returns$__$",
                              "typeString": "function (contract ERC20,address,address,uint256,enum ILSSVMPairFactoryLike.PairVariant) external"
                            }
                          },
                          "id": 3282,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2097:203:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3283,
                        "nodeType": "ExpressionStatement",
                        "src": "2097:203:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3294,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3290,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "id": 3287,
                                      "name": "_assetRecipient",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3235,
                                      "src": "2434:15:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "id": 3285,
                                      "name": "_token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3230,
                                      "src": "2417:6:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_ERC20_$9316",
                                        "typeString": "contract ERC20"
                                      }
                                    },
                                    "id": 3286,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "2424:9:15",
                                    "memberName": "balanceOf",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 8954,
                                    "src": "2417:16:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                      "typeString": "function (address) view external returns (uint256)"
                                    }
                                  },
                                  "id": 3288,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2417:33:15",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "id": 3289,
                                  "name": "beforeBalance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3265,
                                  "src": "2453:13:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2417:49:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3293,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 3291,
                                  "name": "inputAmount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3207,
                                  "src": "2490:11:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "id": 3292,
                                  "name": "protocolFee",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3216,
                                  "src": "2504:11:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2490:25:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2417:98:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4552433230206e6f74207472616e7366657272656420696e",
                              "id": 3295,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2533:26:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_3bb6640f79d5fa793d58a2028bdb2d28e92b1fe46380e7479ac9df1abffbc1cf",
                                "typeString": "literal_string \"ERC20 not transferred in\""
                              },
                              "value": "ERC20 not transferred in"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_3bb6640f79d5fa793d58a2028bdb2d28e92b1fe46380e7479ac9df1abffbc1cf",
                                "typeString": "literal_string \"ERC20 not transferred in\""
                              }
                            ],
                            "id": 3284,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2392:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 3296,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2392:181:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3297,
                        "nodeType": "ExpressionStatement",
                        "src": "2392:181:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3301,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3230,
                              "src": "2634:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$9316",
                                "typeString": "contract ERC20"
                              }
                            },
                            {
                              "id": 3302,
                              "name": "routerCaller",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3211,
                              "src": "2658:12:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "id": 3305,
                                  "name": "_factory",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3214,
                                  "src": "2696:8:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ILSSVMPairFactoryLike_$1700",
                                    "typeString": "contract ILSSVMPairFactoryLike"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ILSSVMPairFactoryLike_$1700",
                                    "typeString": "contract ILSSVMPairFactoryLike"
                                  }
                                ],
                                "id": 3304,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2688:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3303,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2688:7:15",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3306,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2688:17:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 3307,
                              "name": "protocolFee",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3216,
                              "src": "2723:11:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 3308,
                                "name": "pairVariant",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2295,
                                "src": "2752:11:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_enum$_PairVariant_$1662_$",
                                  "typeString": "function () pure returns (enum ILSSVMPairFactoryLike.PairVariant)"
                                }
                              },
                              "id": 3309,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2752:13:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_PairVariant_$1662",
                                "typeString": "enum ILSSVMPairFactoryLike.PairVariant"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_ERC20_$9316",
                                "typeString": "contract ERC20"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_enum$_PairVariant_$1662",
                                "typeString": "enum ILSSVMPairFactoryLike.PairVariant"
                              }
                            ],
                            "expression": {
                              "id": 3298,
                              "name": "router",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3242,
                              "src": "2588:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LSSVMRouter_$7332",
                                "typeString": "contract LSSVMRouter"
                              }
                            },
                            "id": 3300,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2595:21:15",
                            "memberName": "pairTransferERC20From",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 6911,
                            "src": "2588:28:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_contract$_ERC20_$9316_$_t_address_$_t_address_$_t_uint256_$_t_enum$_PairVariant_$1662_$returns$__$",
                              "typeString": "function (contract ERC20,address,address,uint256,enum ILSSVMPairFactoryLike.PairVariant) external"
                            }
                          },
                          "id": 3310,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2588:191:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3311,
                        "nodeType": "ExpressionStatement",
                        "src": "2588:191:15"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 3205,
              "nodeType": "StructuredDocumentation",
              "src": "1208:25:15",
              "text": "@inheritdoc LSSVMPair"
            },
            "id": 3344,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_pullTokenInputAndPayProtocolFee",
            "nameLocation": "1247:32:15",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 3218,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1446:8:15"
            },
            "parameters": {
              "id": 3217,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3207,
                  "mutability": "mutable",
                  "name": "inputAmount",
                  "nameLocation": "1297:11:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3344,
                  "src": "1289:19:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3206,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1289:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3209,
                  "mutability": "mutable",
                  "name": "isRouter",
                  "nameLocation": "1323:8:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3344,
                  "src": "1318:13:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3208,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1318:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3211,
                  "mutability": "mutable",
                  "name": "routerCaller",
                  "nameLocation": "1349:12:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3344,
                  "src": "1341:20:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3210,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1341:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3214,
                  "mutability": "mutable",
                  "name": "_factory",
                  "nameLocation": "1393:8:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3344,
                  "src": "1371:30:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ILSSVMPairFactoryLike_$1700",
                    "typeString": "contract ILSSVMPairFactoryLike"
                  },
                  "typeName": {
                    "id": 3213,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3212,
                      "name": "ILSSVMPairFactoryLike",
                      "nameLocations": [
                        "1371:21:15"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1700,
                      "src": "1371:21:15"
                    },
                    "referencedDeclaration": 1700,
                    "src": "1371:21:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ILSSVMPairFactoryLike_$1700",
                      "typeString": "contract ILSSVMPairFactoryLike"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3216,
                  "mutability": "mutable",
                  "name": "protocolFee",
                  "nameLocation": "1419:11:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3344,
                  "src": "1411:19:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3215,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1411:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1279:157:15"
            },
            "returnParameters": {
              "id": 3219,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1455:0:15"
            },
            "scope": 3472,
            "src": "1238:2203:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              2635
            ],
            "body": {
              "id": 3351,
              "nodeType": "Block",
              "src": "3546:73:15",
              "statements": []
            },
            "documentation": {
              "id": 3345,
              "nodeType": "StructuredDocumentation",
              "src": "3447:25:15",
              "text": "@inheritdoc LSSVMPair"
            },
            "id": 3352,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_refundTokenToSender",
            "nameLocation": "3486:20:15",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 3349,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3537:8:15"
            },
            "parameters": {
              "id": 3348,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3347,
                  "mutability": "mutable",
                  "name": "inputAmount",
                  "nameLocation": "3515:11:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3352,
                  "src": "3507:19:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3346,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3507:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3506:21:15"
            },
            "returnParameters": {
              "id": 3350,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3546:0:15"
            },
            "scope": 3472,
            "src": "3477:142:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              2644
            ],
            "body": {
              "id": 3407,
              "nodeType": "Block",
              "src": "3781:561:15",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 3364,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 3362,
                      "name": "protocolFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3358,
                      "src": "3839:11:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 3363,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3853:1:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3839:15:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 3406,
                  "nodeType": "IfStatement",
                  "src": "3835:501:15",
                  "trueBody": {
                    "id": 3405,
                    "nodeType": "Block",
                    "src": "3856:480:15",
                    "statements": [
                      {
                        "assignments": [
                          3367
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3367,
                            "mutability": "mutable",
                            "name": "_token",
                            "nameLocation": "3876:6:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3405,
                            "src": "3870:12:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$9316",
                              "typeString": "contract ERC20"
                            },
                            "typeName": {
                              "id": 3366,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 3365,
                                "name": "ERC20",
                                "nameLocations": [
                                  "3870:5:15"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 9316,
                                "src": "3870:5:15"
                              },
                              "referencedDeclaration": 9316,
                              "src": "3870:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$9316",
                                "typeString": "contract ERC20"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3370,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 3368,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3204,
                            "src": "3885:5:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_ERC20_$9316_$",
                              "typeString": "function () pure returns (contract ERC20)"
                            }
                          },
                          "id": 3369,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3885:7:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ERC20_$9316",
                            "typeString": "contract ERC20"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3870:22:15"
                      },
                      {
                        "assignments": [
                          3372
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3372,
                            "mutability": "mutable",
                            "name": "pairTokenBalance",
                            "nameLocation": "4045:16:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 3405,
                            "src": "4037:24:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3371,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4037:7:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 3380,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 3377,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967268,
                                  "src": "4089:4:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_LSSVMPairERC20_$3472",
                                    "typeString": "contract LSSVMPairERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_LSSVMPairERC20_$3472",
                                    "typeString": "contract LSSVMPairERC20"
                                  }
                                ],
                                "id": 3376,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4081:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 3375,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4081:7:15",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 3378,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4081:13:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 3373,
                              "name": "_token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3367,
                              "src": "4064:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$9316",
                                "typeString": "contract ERC20"
                              }
                            },
                            "id": 3374,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4071:9:15",
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 8954,
                            "src": "4064:16:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 3379,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4064:31:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4037:58:15"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3383,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3381,
                            "name": "protocolFee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3358,
                            "src": "4113:11:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 3382,
                            "name": "pairTokenBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3372,
                            "src": "4127:16:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4113:30:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3389,
                        "nodeType": "IfStatement",
                        "src": "4109:99:15",
                        "trueBody": {
                          "id": 3388,
                          "nodeType": "Block",
                          "src": "4145:63:15",
                          "statements": [
                            {
                              "expression": {
                                "id": 3386,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 3384,
                                  "name": "protocolFee",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3358,
                                  "src": "4163:11:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 3385,
                                  "name": "pairTokenBalance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3372,
                                  "src": "4177:16:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4163:30:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 3387,
                              "nodeType": "ExpressionStatement",
                              "src": "4163:30:15"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3392,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 3390,
                            "name": "protocolFee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3358,
                            "src": "4225:11:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 3391,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4239:1:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "4225:15:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3404,
                        "nodeType": "IfStatement",
                        "src": "4221:105:15",
                        "trueBody": {
                          "id": 3403,
                          "nodeType": "Block",
                          "src": "4242:84:15",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "id": 3398,
                                        "name": "_factory",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3356,
                                        "src": "4288:8:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_ILSSVMPairFactoryLike_$1700",
                                          "typeString": "contract ILSSVMPairFactoryLike"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_ILSSVMPairFactoryLike_$1700",
                                          "typeString": "contract ILSSVMPairFactoryLike"
                                        }
                                      ],
                                      "id": 3397,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "4280:7:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 3396,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "4280:7:15",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 3399,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4280:17:15",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 3400,
                                    "name": "protocolFee",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3358,
                                    "src": "4299:11:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "id": 3393,
                                    "name": "_token",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3367,
                                    "src": "4260:6:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_ERC20_$9316",
                                      "typeString": "contract ERC20"
                                    }
                                  },
                                  "id": 3395,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "4267:12:15",
                                  "memberName": "safeTransfer",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 10194,
                                  "src": "4260:19:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$9316_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$9316_$",
                                    "typeString": "function (contract ERC20,address,uint256)"
                                  }
                                },
                                "id": 3401,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4260:51:15",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 3402,
                              "nodeType": "ExpressionStatement",
                              "src": "4260:51:15"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 3353,
              "nodeType": "StructuredDocumentation",
              "src": "3625:25:15",
              "text": "@inheritdoc LSSVMPair"
            },
            "id": 3408,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_payProtocolFeeFromPair",
            "nameLocation": "3664:23:15",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 3360,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3772:8:15"
            },
            "parameters": {
              "id": 3359,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3356,
                  "mutability": "mutable",
                  "name": "_factory",
                  "nameLocation": "3719:8:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3408,
                  "src": "3697:30:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ILSSVMPairFactoryLike_$1700",
                    "typeString": "contract ILSSVMPairFactoryLike"
                  },
                  "typeName": {
                    "id": 3355,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3354,
                      "name": "ILSSVMPairFactoryLike",
                      "nameLocations": [
                        "3697:21:15"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1700,
                      "src": "3697:21:15"
                    },
                    "referencedDeclaration": 1700,
                    "src": "3697:21:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ILSSVMPairFactoryLike_$1700",
                      "typeString": "contract ILSSVMPairFactoryLike"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3358,
                  "mutability": "mutable",
                  "name": "protocolFee",
                  "nameLocation": "3745:11:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3408,
                  "src": "3737:19:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3357,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3737:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3687:75:15"
            },
            "returnParameters": {
              "id": 3361,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3781:0:15"
            },
            "scope": 3472,
            "src": "3655:687:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              2652
            ],
            "body": {
              "id": 3429,
              "nodeType": "Block",
              "src": "4498:146:15",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 3419,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 3417,
                      "name": "outputAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3413,
                      "src": "4545:12:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 3418,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4560:1:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "4545:16:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 3428,
                  "nodeType": "IfStatement",
                  "src": "4541:97:15",
                  "trueBody": {
                    "id": 3427,
                    "nodeType": "Block",
                    "src": "4563:75:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 3423,
                              "name": "tokenRecipient",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3411,
                              "src": "4598:14:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 3424,
                              "name": "outputAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3413,
                              "src": "4614:12:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 3420,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3204,
                                "src": "4577:5:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_ERC20_$9316_$",
                                  "typeString": "function () pure returns (contract ERC20)"
                                }
                              },
                              "id": 3421,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4577:7:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$9316",
                                "typeString": "contract ERC20"
                              }
                            },
                            "id": 3422,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4585:12:15",
                            "memberName": "safeTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 10194,
                            "src": "4577:20:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$9316_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$9316_$",
                              "typeString": "function (contract ERC20,address,uint256)"
                            }
                          },
                          "id": 3425,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4577:50:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3426,
                        "nodeType": "ExpressionStatement",
                        "src": "4577:50:15"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 3409,
              "nodeType": "StructuredDocumentation",
              "src": "4348:25:15",
              "text": "@inheritdoc LSSVMPair"
            },
            "id": 3430,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_sendTokenOutput",
            "nameLocation": "4387:16:15",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 3415,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4489:8:15"
            },
            "parameters": {
              "id": 3414,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3411,
                  "mutability": "mutable",
                  "name": "tokenRecipient",
                  "nameLocation": "4429:14:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3430,
                  "src": "4413:30:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 3410,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4413:15:15",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3413,
                  "mutability": "mutable",
                  "name": "outputAmount",
                  "nameLocation": "4461:12:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3430,
                  "src": "4453:20:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3412,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4453:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4403:76:15"
            },
            "returnParameters": {
              "id": 3416,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4498:0:15"
            },
            "scope": 3472,
            "src": "4378:266:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              2837
            ],
            "body": {
              "id": 3439,
              "nodeType": "Block",
              "src": "4817:47:15",
              "statements": [
                {
                  "expression": {
                    "id": 3437,
                    "name": "IMMUTABLE_PARAMS_LENGTH",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 3190,
                    "src": "4834:23:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 3436,
                  "id": 3438,
                  "nodeType": "Return",
                  "src": "4827:30:15"
                }
              ]
            },
            "documentation": {
              "id": 3431,
              "nodeType": "StructuredDocumentation",
              "src": "4650:25:15",
              "text": "@inheritdoc LSSVMPair"
            },
            "id": 3440,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_immutableParamsLength",
            "nameLocation": "4751:22:15",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 3433,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4790:8:15"
            },
            "parameters": {
              "id": 3432,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4773:2:15"
            },
            "returnParameters": {
              "id": 3436,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3435,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3440,
                  "src": "4808:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3434,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4808:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4807:9:15"
            },
            "scope": 3472,
            "src": "4742:122:15",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              2856
            ],
            "body": {
              "id": 3470,
              "nodeType": "Block",
              "src": "5004:185:15",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 3455,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967281,
                          "src": "5029:3:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 3456,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "5033:6:15",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5029:10:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3457,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3446,
                        "src": "5041:6:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 3452,
                        "name": "a",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3444,
                        "src": "5014:1:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$9316",
                          "typeString": "contract ERC20"
                        }
                      },
                      "id": 3454,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5016:12:15",
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10194,
                      "src": "5014:14:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_ERC20_$9316_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_ERC20_$9316_$",
                        "typeString": "function (contract ERC20,address,uint256)"
                      }
                    },
                    "id": 3458,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5014:34:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3459,
                  "nodeType": "ExpressionStatement",
                  "src": "5014:34:15"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_contract$_ERC20_$9316",
                      "typeString": "contract ERC20"
                    },
                    "id": 3463,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 3460,
                      "name": "a",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3444,
                      "src": "5063:1:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$9316",
                        "typeString": "contract ERC20"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 3461,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3204,
                        "src": "5068:5:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$__$returns$_t_contract$_ERC20_$9316_$",
                          "typeString": "function () pure returns (contract ERC20)"
                        }
                      },
                      "id": 3462,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5068:7:15",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$9316",
                        "typeString": "contract ERC20"
                      }
                    },
                    "src": "5063:12:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 3469,
                  "nodeType": "IfStatement",
                  "src": "5059:124:15",
                  "trueBody": {
                    "id": 3468,
                    "nodeType": "Block",
                    "src": "5077:106:15",
                    "statements": [
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 3465,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3446,
                              "src": "5165:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3464,
                            "name": "TokenWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1760,
                            "src": "5149:15:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 3466,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5149:23:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3467,
                        "nodeType": "EmitStatement",
                        "src": "5144:28:15"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 3441,
              "nodeType": "StructuredDocumentation",
              "src": "4870:25:15",
              "text": "@inheritdoc LSSVMPair"
            },
            "functionSelector": "a1db9782",
            "id": 3471,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 3450,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 3449,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "4990:9:15"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8824,
                  "src": "4990:9:15"
                },
                "nodeType": "ModifierInvocation",
                "src": "4990:9:15"
              }
            ],
            "name": "withdrawERC20",
            "nameLocation": "4909:13:15",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 3448,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4973:8:15"
            },
            "parameters": {
              "id": 3447,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3444,
                  "mutability": "mutable",
                  "name": "a",
                  "nameLocation": "4929:1:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3471,
                  "src": "4923:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$9316",
                    "typeString": "contract ERC20"
                  },
                  "typeName": {
                    "id": 3443,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3442,
                      "name": "ERC20",
                      "nameLocations": [
                        "4923:5:15"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 9316,
                      "src": "4923:5:15"
                    },
                    "referencedDeclaration": 9316,
                    "src": "4923:5:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$9316",
                      "typeString": "contract ERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3446,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4940:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 3471,
                  "src": "4932:14:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3445,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4932:7:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4922:25:15"
            },
            "returnParameters": {
              "id": 3451,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5004:0:15"
            },
            "scope": 3472,
            "src": "4900:289:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3473,
        "src": "619:4572:15",
        "usedErrors": [
          1779,
          8782,
          8784
        ]
      }
    ],
    "src": "37:5155:15"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.16+commit.07a7930e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.9",
  "updatedAt": "2022-09-02T11:37:45.603Z",
  "devdoc": {
    "author": "boredGenius and 0xmons",
    "kind": "dev",
    "methods": {
      "call(address,bytes)": {
        "params": {
          "data": "The calldata to pass to the contract",
          "target": "The contract to call"
        }
      },
      "changeAssetRecipient(address)": {
        "params": {
          "newRecipient": "The new asset recipient"
        }
      },
      "changeDelta(uint128)": {
        "params": {
          "newDelta": "The new delta parameter"
        }
      },
      "changeFee(uint96)": {
        "params": {
          "newFee": "The new LP fee percentage, 18 decimals"
        }
      },
      "changeSpotPrice(uint128)": {
        "params": {
          "newSpotPrice": "The new selling spot price value, in Token"
        }
      },
      "getBuyNFTQuote(uint256)": {
        "details": "Used as read function to query the bonding curve for buy pricing info",
        "params": {
          "numNFTs": "The number of NFTs to buy from the pair"
        }
      },
      "getSellNFTQuote(uint256)": {
        "details": "Used as read function to query the bonding curve for sell pricing info",
        "params": {
          "numNFTs": "The number of NFTs to sell to the pair"
        }
      },
      "initialize(address,address,uint128,uint96,uint128)": {
        "details": "Only called once by factory to initialize. We verify this by making sure that the current owner is address(0). The Ownable library we use disallows setting the owner to be address(0), so this condition should only be valid before the first initialize call.",
        "params": {
          "_assetRecipient": "The address that will receive the TOKEN or NFT sent to this pair during swaps. NOTE: If set to address(0), they will go to the pair itself.",
          "_delta": "The initial delta of the bonding curve",
          "_fee": "The initial % fee taken, if this is a trade pair",
          "_owner": "The owner of the pair",
          "_spotPrice": "The initial price to sell an asset into the pair"
        }
      },
      "multicall(bytes[],bool)": {
        "details": "Intended for withdrawing/altering pool pricing in one tx, only callable by owner, cannot change owner",
        "params": {
          "calls": "The calldata for each call to make",
          "revertOnFail": "Whether or not to revert the entire tx if any of the calls fail"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "swapNFTsForToken(uint256[],uint256,address,bool,address)": {
        "details": "To compute the amount of token to that will be received, call bondingCurve.getSellInfo.",
        "params": {
          "isRouter": "True if calling from LSSVMRouter, false otherwise. Not used for ETH pairs.",
          "minExpectedTokenOutput": "The minimum acceptable token received by the sender. If the actual amount is less than this value, the transaction will be reverted.",
          "nftIds": "The list of IDs of the NFTs to sell to the pair",
          "routerCaller": "If isRouter is true, ERC20 tokens will be transferred from this address. Not used for ETH pairs.",
          "tokenRecipient": "The recipient of the token output"
        },
        "returns": {
          "outputAmount": "The amount of token received"
        }
      },
      "swapTokenForAnyNFTs(uint256,uint256,address,bool,address)": {
        "details": "To compute the amount of token to send, call bondingCurve.getBuyInfo. This swap function is meant for users who are ID agnostic",
        "params": {
          "isRouter": "True if calling from LSSVMRouter, false otherwise. Not used for ETH pairs.",
          "maxExpectedTokenInput": "The maximum acceptable cost from the sender. If the actual amount is greater than this value, the transaction will be reverted.",
          "nftRecipient": "The recipient of the NFTs",
          "numNFTs": "The number of NFTs to purchase",
          "routerCaller": "If isRouter is true, ERC20 tokens will be transferred from this address. Not used for ETH pairs."
        },
        "returns": {
          "inputAmount": "The amount of token used for purchase"
        }
      },
      "swapTokenForSpecificNFTs(uint256[],uint256,address,bool,address)": {
        "details": "To compute the amount of token to send, call bondingCurve.getBuyInfo This swap is meant for users who want specific IDs. Also higher chance of reverting if some of the specified IDs leave the pool before the swap goes through.",
        "params": {
          "isRouter": "True if calling from LSSVMRouter, false otherwise. Not used for ETH pairs.",
          "maxExpectedTokenInput": "The maximum acceptable cost from the sender. If the actual amount is greater than this value, the transaction will be reverted.",
          "nftIds": "The list of IDs of the NFTs to purchase",
          "nftRecipient": "The recipient of the NFTs",
          "routerCaller": "If isRouter is true, ERC20 tokens will be transferred from this address. Not used for ETH pairs."
        },
        "returns": {
          "inputAmount": "The amount of token used for purchase"
        }
      },
      "token()": {
        "details": "See LSSVMPairCloner for an explanation on how this works"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Disallows setting to the zero address as a way to more gas-efficiently avoid reinitialization When ownership is transferred, if the new owner implements IOwnershipTransferCallback, we make a callback Can only be called by the current owner."
      },
      "withdrawERC1155(address,uint256[],uint256[])": {
        "params": {
          "a": "The NFT to transfer",
          "amounts": "The amounts of each id to transfer",
          "ids": "The NFT ids to transfer"
        }
      },
      "withdrawERC20(address,uint256)": {
        "params": {
          "a": "The token to transfer",
          "amount": "The amount of tokens to send to the owner"
        }
      },
      "withdrawERC721(address,uint256[])": {
        "details": "If the NFT is the pair's collection, we also remove it from the id tracking (if the NFT is missing enumerable).",
        "params": {
          "a": "The NFT to transfer",
          "nftIds": "The list of IDs of the NFTs to send to the owner"
        }
      }
    },
    "title": "An NFT/Token pair where the token is an ERC20",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bondingCurve()": {
        "notice": "Returns the type of bonding curve that parameterizes the pair"
      },
      "call(address,bytes)": {
        "notice": "Allows the pair to make arbitrary external calls to contracts whitelisted by the protocol. Only callable by the owner."
      },
      "changeAssetRecipient(address)": {
        "notice": "Changes the address that will receive assets received from trades. Only callable by the owner."
      },
      "changeDelta(uint128)": {
        "notice": "Updates the delta parameter. Only callable by the owner."
      },
      "changeFee(uint96)": {
        "notice": "Updates the fee taken by the LP. Only callable by the owner. Only callable if the pool is a Trade pool. Reverts if the fee is >= MAX_FEE."
      },
      "changeSpotPrice(uint128)": {
        "notice": "Updates the selling spot price. Only callable by the owner."
      },
      "getAllHeldIds()": {
        "notice": "Returns all NFT IDs held by the pool"
      },
      "getAssetRecipient()": {
        "notice": "Returns the address that assets that receives assets when a swap is done with this pair Can be set to another address by the owner, if set to address(0), defaults to the pair's own address"
      },
      "initialize(address,address,uint128,uint96,uint128)": {
        "notice": "Called during pair creation to set initial parameters"
      },
      "multicall(bytes[],bool)": {
        "notice": "Allows owner to batch multiple calls, forked from: https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringBatchable.sol"
      },
      "nft()": {
        "notice": "Returns the NFT collection that parameterizes the pair"
      },
      "pairVariant()": {
        "notice": "Returns the pair's variant (NFT is enumerable or not, pair uses ETH or ERC20)"
      },
      "poolType()": {
        "notice": "Returns the pair's type (TOKEN/NFT/TRADE)"
      },
      "swapNFTsForToken(uint256[],uint256,address,bool,address)": {
        "notice": "Sends a set of NFTs to the pair in exchange for token"
      },
      "swapTokenForAnyNFTs(uint256,uint256,address,bool,address)": {
        "notice": "Sends token to the pair in exchange for any `numNFTs` NFTs"
      },
      "swapTokenForSpecificNFTs(uint256[],uint256,address,bool,address)": {
        "notice": "Sends token to the pair in exchange for a specific set of NFTs"
      },
      "token()": {
        "notice": "Returns the ERC20 token associated with the pair"
      },
      "withdrawERC1155(address,uint256[],uint256[])": {
        "notice": "Rescues ERC1155 tokens from the pair to the owner. Only callable by the owner."
      },
      "withdrawERC20(address,uint256)": {
        "notice": "Rescues ERC20 tokens from the pair to the owner. Only callable by the owner (onlyOwnable modifier is in the implemented function)."
      },
      "withdrawERC721(address,uint256[])": {
        "notice": "Rescues a specified set of NFTs owned by the pair to the owner address. (onlyOwnable modifier is in the implemented function)"
      }
    },
    "version": 1
  }
}